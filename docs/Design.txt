So, first we need to think out the data structure, last time we made it super abstract and so that it could take in data from practically anything,
which I think is a lofty goal, but also one that probably isn't the greatest for this specific application. First, we'll have two data classes:
    Sensor
    DataFile

Let's just focus on Sensor for now, so every kind of sensor will have it's own class, and Sensor will be the base class for all of them:
So the real question is how do we get data from the arduino to the computer? Should we just immediately forward data from the arduino to the computer,
or should we offload some operation to the Arduino? I think we can let the arduino handle buffereding data, and then wait to return the buffered data
until it's all been obtained. I also think we can offload the sensor calibration to the Arduino as well.
Okay, so in reality, here's how the sensor is going to be used, we'll treat it like a passive object, so first off, here's the ways it can be used:
    GetTheCurrentReadingRightNow
    GetABatchOfReadings (after setting the sampling period, and specifying a sample count or time duration)

Then, for the batch of readings, that will allow for some automony. There's a couple different ways that can be done. But no matter what, there's a
callback function that will be called because of it. So first, you set the period stuff like above, then you should probably set a callback function:
    UnBufferedMode: every piece of data is directly passed to the callbackfunction as soon as possible.
    BufferedMode:   the sensor waits until a certain amount of data has been processed then returns that.

And there's also a couple ways that the exact timing of batch mode can be stated, either manually with:
    Start
    Stop
Or with triggers, by starting whenever readings meet a certain threshold, and same thing can be done for stopping (only if sample count/duration isn't
also specified.) This is alot of modes of operations...

But in reality, I think what we should do is always have the sensor polling and reading into an internal buffer, and we just read out of that whenever we
want to honestly. Unless we need to manually stop sensors to conserve processing power... Which might not be a terrible idea honestly. Maybe we shouldn't
always have them reading stuff... idk...



So let's hypothetically think out a function stack here, let's say I want to get the current value of a sensor, in order to do it:
    1) Encode a getData signal, with the sensor I want to get from.
    2) Send the signal to the Arduino
    3) The Arduino receives and processes the signal
    4) It finds the sensor and reads a value off of it.
    5) The arduino sends the value back.

To model this, we could create a new sensor, and pass in an interface as part of the constructor.
Then, when we call sensor.readValue(), if interface exists, it'll.

NO I KNOW HOW TO NOW! We'll have an arduino class, that has 4 sensors attached to it, and the sensors will subclass ArduinoSensor,
which will know to communicate with the arduino, and then everything will work out okay! Hopefully... yeah, let's do that!



Whatever, I'm getting caught up on too many things that I shouldn't be. I'm gonna think about the sensor stuff
later and just think about the GUI for now, since I at least more or less have that thought out by now...
So, first we'll have a heirarchy for the data, data is organized in:
    experiment
        trial

So an experiment has multiple trials, which should all follow the same parameters and types more or less.
And then obviously, there can be multiple experiments too. Each completely disjoint from the others.
So on the left pane, we'll have a scroll pane with a tree of experiment and trial, hopefully more
stylized than the plain default one... Then in the right screen, we'll have a free range window thing going on.
So there are windows, which can consist of raw data sheets, or graphs. Each window could have multiple tabs, or overlay,
like for instance, multiple graphs on one plane, or multiple columns in the data sheet obviously. And lot's of
drag and drop I guess. Idk actually. I'm a fan of having the multiple graphs... But not of the mutliple data sheets.
So maybe, left pane is navigation, middle pane is a tabbed data sheet section, and then the right pane is a free-roam
graph area, with snapping and drag-n-drop support. 








Okay, let's redo this all over again then.
So, we'll have sensors which are there own self-contained interface. They just encapsulate data about the
sensor, and provide methods for doing stuff.


New idea. Every sensor has to be accessed through an interface (like tha arduino),
if need be, we can create a raw interface, or even better, make sensor an interface,
so you can have sensor/interace hybrids. Well actually, what should we do. Let's list out
the critical features of each kind:

sensor(interface):
    String getName()
    String getDesc()
    void calibrate(currentValue)
    double getReading()
    double getReadingRaw()

Adapter(class):
    Sensor[] getSensors()
    Sensor getSensor(int)
    getReading(int)





Okay, so we have interfaces for handling the sensors, their interfaces, and a class for interacting with their data.
The current workflow is that all sensors are hooked up to sensor interfaces, and unless you're feeling gutsy or debugging,
everything you do with sensors should be done through the API of a sensor interface. So here is the current flow:

You only interact with the sensor interface, you call it's methods, and it handles all the sensor stuff in the background for you.
The only non-obvious methods with life-cycle and design concerns are those that return DoubleBuffers. For those let's lay the
following contract: When these methods are called: the SensorInterface will create a new doublebuffer, do whatever it wants with it,
start the things it needs to, and it'll return it. The SensorInterface is the only thing that will write to the double buffer,
and when it's done it'll close it.

The idea of data callbacks is nice, but with the sampling frequencies we can expect it'll be pretty unrealistic to have that every time.
So instead of pushing with callbacks, we'll use a polling system. If the buffer is closed, don't poll, it's done. If it's open, then poll
for every whenever often (we could use the samplingFrequency and be smart about it, or just call it 0.2 seconds and be done with it) and
do what you want with it. This way we can keep our nice encapsulation. And as for tracking what trial the buffer belongs too, when we
actually call 'SensorInterface.somethingReturnBuffer', the caller should know the trial data, and can slap it in the database on it's own.
This way we can completely separate the sensor and sensorInterface classes from the whole rest of the program. And then DoubleBuffer is done.
Nothing else to worry about or think about for any of them! Nice!

I made up these tags for writing out future documentation, so these are what they are:
$DOC_START
## DoubleBuffers

$TODO

### DoubleBuffer LifeCycle

There are two main kinds of DoubleBuffers, *_*Active Buffers*_*, and *_*Closed Buffers*_*. _Active Buffers_ are those that are still being actively written into, and _Closed Buffers_ are those that aren't; no additional data will be written to a _Closed Buffer_.

Every buffer has a *_*Owner*_*, namely the object that created the buffer. This is purely a conceptual idea, there's no data member representing this, and no actual restrictions to enforce any of the following contracts.
However, the contract used interally for this project is that any number of threads can read from a buffer, but that only a buffer's owner can modify it. Should a thread need to modify the buffer's data, it can first _clone_ (see _DataBuffer.clone()_) the buffer, creating a new buffer of which it will be the logical owner.
This concept of exclusive modification permission matters most for _Active Buffers_, where only the _Buffer Owner_ is contractually permitted to write data to the buffer, and when the data is finished, it's the owner's responsibility to ensure it's closed (with a call to _DataBuffer.close()_).

Within this program, there's 3 ways DoubleBuffers are created and used:
1) _Active Buffers_ are created by a _Sensor Interface_, where sensor data is written into the buffer as readings are taken.
2) _Closed Buffers_ are allocated by the _DataManager_ and filled with data from a file, often from a previous session.
3) _Closed Buffers_ are allocated by the _DataManager_ when cloning an existent buffer to clean/cut data entries before analysis.

Here is the explicit lifecycle for each case:

#### 1
In this case, first a call to a _SensorInterface_ method is triggered by the user, the _SensorInterface_ handles the call, and returns an _Active Double Buffer_ of which the sensor is the owner.
Next the caller registers the _Active Double Buffer_ with the _DataManager_, which stores a reference to the buffer and returns a ID string other parts of the program can use to reference the buffer.
Finally the caller registers the ID it got from _DataManager_ with the corresponding _Trial_ object that the data is being collected for.

It's common for the UI to periodically check the buffer (through _DataManager_) while it's still active to update graphs and datasheets.
When the buffer is marked as closed, the UI will stop checking the buffer and update any corresponding graphs or datasheets.

When data is finished being read from the _SensorInterface_, it'll close the buffer, and drop it's reference to it. At this point the buffer is now *_*Unowned*_*, meaning nothing owns it, and as such it'll remain unmodified forever.
Even after the _SensorInterface_ drops the buffer, there will still be a usable reference of it in _DataManager_, which can be cloned and read from as needed.

#### 2
In this case, a call to _DataManager.loadFromFile()_ is triggered by the user, and _DataManager_ loads the file and begins decoding it. 
Within this program, all buffers are associated with a _parent_ (either a _session_, _experiment_, or _trial_, depending on how they were created) and this is reflected within the save file, where they'll be listed as a data member of their _parent_.
When the save file is loaded, all the objects stored in it will be loaded, and any buffers will be allocated into _DataManager_ and given an ID, just like in case 1. Once the buffer's corresponding _parent_ has been constructed, the buffer's ID will be given to it, again, like case 1.
The only differences here are that all the buffers will be loaded as _Closed_, as obviously, there's no data to write into them, and that the _parent_ keeps track which buffers contained data collected from sensors, and which were derived from those through filtering or calculations. When the _parent_ is loaded in, this data is loaded also.

#### 3
Buffers of these type are called *_*Derived Buffers*_*, as they are clones of buffers consisting of original sensor data. These are allocated and stored in _DataManager_ like case 2 as _Closed Buffers_ when the user either clones or runs a filter/calculation on an existent buffer.
TODO maybe I should write more here?
$DOC_END


Okay, and so how do we handle trials, experiments, and all that stuff. Trials I think should just be a passive struct more or less...
I was originally thinking about making Experiment more of an active object, but now I don't know about that... I think I'll make all 3 more or less just passive structs for holding data honestly. Then I'll let the UI code handle actually tying everything together, since the UI code will be an absolute wreck anyways...
But we should also have a command line tool for using this, even if only for our own testing purposes I think... Idk.

$DOC_START
## Triggers

$TODO

_Triggers_ are made to be incredibly lightweight and highly disposable, once a trigger activates, it's meant to be thrown away. And no two objects should ever share a trigger at the same time.

### Trigger LifeCycle

Within this program, _Triggers_ are used solely for starting and stopping batch readings. When the user is configuring a batch reading, they have the option to attach start and stop triggers that dictate when to start and stop the batch reading.
After the user has finished configuring the batch reading, and starts it. First, _Triggers_ are created as per user specification, and any other configuration is setup as well, then the triggers are passed to _SensorInterface.startBatchReading_. The caller holds no reference to the triggers.
The SensorInterface will then immediately start collecting data and passing it into _startTrigger.isTriggered_; when this returns true, it will start actually recording the data, and will continue to until _stopTrigger.isTriggered_ returns true.
Once the batch reading is over, it discards the start and stop trigger, at which point, nothing should still hold a reference to them.
$DOC_END

$IDEA When we have batch readings with triggers, we should show the whole graph of values being read, AND also show on the graph where the trigger condition is (horizontal line for thresholds, and vertical for time delays).
Then when the trigger hits, change something on the graph to indicate recording has begun. And we could also do the same thing for the ending trigger. I think that would be pretty cool!



Okay, well now we have DoubleBuffer and Trigger done. So next should be the Session/Experiment/Trial objects. Then after that it'll be time to seriously take a shot at SensorInterface. Then we can start on the GUI (that'll take a while), and then the framework should be all done, and we can start on a specific implementation for the arduinos.

So, how to do those 3 though? I don't know. It's shower time, then work time! (9:42 16/10/2019)

Okay, so the real question is how active of a role do we want these objects to have? For ease of use and code efficiency, it's probably best if they're more or less just inactive structs, and then we have functions in some Main class that do all the heavy lifting and then just copy everything into the trial whatever struct.
But that isn't as good of an encapsulation, and it's not as logial. So I think I'll just stick with having them behave more as full... But then it's still not entirely encapsaulative, it's more so just like a layering on top of SensorInterface...

21:58 17/10/2019
Okay, so we need to actually finish this like now. So, time to kick it into overdrive. We'll finish the data types first, and I'm going for a half-encapsulationg.
So Session, Experiment, and Trial only encapsulate stuff that is related to them, and nothing else. So they still play a somewhat active role in of that, experiments can make trials and so on, or they can return information about themselves and be modified in slight ways (liek setting names and stuff)
but all in all these are effecitvely more of structs than they are 'real' classes. So let's get this part churned out, then we can go back and focus on the database stuff.

$DOC_START
## Data Organization

All parts of a labratory session are organized into 3 fundamental heirarchies:
- Session
  - Experiment
    - Trial

A *_*Session*_* represents one complete lab session and all the data gathered during it.
A _session_ consists of multiple *_*Experiments*_*, these represent different activities carried out in a session.
Finally there are *_*Trials*_*, which are an individual single run trial. Often an experiment is composed of multiple repeated trials.
$DOC_END

Okay, I'm also deferring derived data buffers until later. We can figure out how to cleanly implement and handle them after we get a release version of this finished.

Alright, I also need to add documentation for the DataManager system

$DOC_START
##Data Manager
$DOC_END

For now, it's just getting left blank though because I need to focus on all the other things more.
Alright... So next I need to seriously rethink the structure and update the comments of SensorInterface. After that I think I can make the Main class. Then after that I'm not sure wether to start on the GUI or the Arduino stuff... Probably the latter.



Okay, so how do we want to make the whole trial/experiment/session thing work?
In reference to the whole system working together. So like, how should we have the user actually take data?
So, we'll have the navigation list off to the left side. Okay, no matter what we'll have a triggerable task.
$IDEA they can right click on an experiment in the navigation pane and select 'start new trial' or whatever, and it'll launch, of there's a record button in the toolbar (along with a chooser to pick out an experiment, by default it'll choose the most recent one). And we'll even have like a a menu option as well that'll launch it.
But then once it's launched... Idk, maybe we shouldn't have doublebuffer be returned from the... no, I say keep it.
Okay, so we first setup the readings we want on the sensor interface, (because we'll of split up start and setup already), then get all the bufferIDs together, call experiment.newTrial with the bufferIDs, and then (this is all being done in Main), we'll pass the trial to the GUI, and it'll automatically put it in the GUI as it needs to be. So all the messy interstuff will always be handled in main.
And then making experiments will be a little complicated I guess...

Okay, we also need a separate panel for handling sensors...
First, let's split up the navigation... We'll have a section for data and another section for the sensors/interfaces.


New issue, we've exposed direct access to the DoubleBuffers backing array for efficiency purposes, and this is something I plan to do in other places as well. But I also don't want either me or other people going haywire with it. And just having a comment saying 'hey this is dangerous' isn't good enough, so I'm going to abuse the 'deprecated' annotation.

$DOC_START
## Deprecated annotation

Within the source, you may come across '@deprecated' and '@SuppressWarnings', these are Java annotations, and used to give the compiler extra information while it's running.
'@deprecated' marks something (usually a method) as deprecated, and the compiler will issue a warning if it's used anywhere else in the program, unless wherever it's being used also has a '@SuppressWarnings' annotation, in which case the compiler will ignore the fact that deprecated things are being used.
Within this project, we stretch the logic of this system and instead use '@deprecated' to indicate something as being unsafe or potentially very dangerous. For instance the 'getDataDirect' method of DoubleBuffer, this provides direct access to the buffer's data, which is not hanled correctly or carefully enough could cause serious issues. For this reason we mark it with @deprecated.
The logic is that this will prevent is from being used flippantly, if someone uses a dangerous method without realizing the full consequences of it, the compiler will warn them about it. But if someone knows the potential danger it represents and wants to use it anyways, they can always mark it with '@SuppressWarnings'.
$DOC_END

Alright, we broke all the documentation we did beforehand on DoubleBuffer... Now it's created by Trial and just passed to the sensor interface instead.
So hooray! Now we get to rewrite literally all of that eventually...

Anyways, Session, Experiment, and Trial are pretty much all done now I think. So... Guess it's time to add the new support into DataManager, and start interfacing everything together into Main so that it can actually do things that are useful, and hopefully it'll be functioning at a basic level by Friday for preliminary testing.
After I get everything hooked in together then I'll still have to start work on the actual Interface between my program and the Vernier Arduino stuff... But that shouldn't be too terrible. And I can hack away at that however once the main logic part of the project is over and done with!
